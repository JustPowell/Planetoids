#version 450

layout(quads, fractional_odd_spacing, ccw) in;
patch in vec4 pColor;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

in TCS_OUT
{
	vec4 color;
	vec4 position;
	vec3 normal;
	float noise;
} tes_in[];

out TES_OUT
{
	vec4 color;
	vec4 position;
	vec3 normal;
	float noise;
} tes_out;

out vec4 tePatchDistance;

vec3 mod289(vec3 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
  return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 fade(vec3 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise, periodic variant
float pnoise(vec3 P, vec3 rep)
{
  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period
  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period
  Pi0 = mod289(Pi0);
  Pi1 = mod289(Pi1);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 * (1.0 / 7.0);
  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 * (1.0 / 7.0);
  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}

float turbulence( vec3 p ) {
    float w = 100.0;
    float t = -.5;
    for (float f = 1.0 ; f <= 4.0 ; f++ ){
        float power = pow( 2.0, f );
        t += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );
    }
    return t;
}

vec4 interpolate(in vec4 v0, in vec4 v1, in vec4 v2, in vec4 v3)
{
	vec4 a = mix(v0, v1, gl_TessCoord.x);
	vec4 b = mix(v3, v2, gl_TessCoord.x);
	return mix(a, b, gl_TessCoord.y);
}

vec3 calcnorm (vec4 v0, vec4 v1, vec4 v2, vec4 v3)
{
	vec4 a, b, c, d;
	a = v0 - v1;
	b = v2 - v1;
	c = v3 - v0;
	d = v1 - v0;
	
	vec3 norm = normalize(cross(a.xyz, b.xyz) + cross(c.xyz, d.xyz));
	return norm;
}

float getSmoothness(vec4 col)
{
	float s;
	if(col.xyz == vec3(0.f, 0.f, 1.f) || col.xyz == vec3(1.f, 0.f, 0.f) || col.xyz == vec3(0.f, 1.f, 0.f)
	   || col.xyz == vec3(1.f, 1.f, 0.f) || col.xyz == vec3(0.f, 1.f, 1.f) || col.xyz == vec3(1.f, 0.f, 1.f)
	   || col.xyz == vec3(1.f, 1.f, 1.f) || col.xyz == vec3(1.f, 0.5f, 0.f) || col.xyz == vec3(0.25f, 0.25f, .25f))
	{
		s = .05f;
	}
	else
	{
		s = .4f;
	}
	return s;
}


void main()
{
	/*gl_Position = interpolate(
		gl_in[0].gl_Position,
		gl_in[1].gl_Position,
		gl_in[2].gl_Position,
		gl_in[3].gl_Position);
	*/
	tes_out.position = interpolate(tes_in[0].position,tes_in[1].position,tes_in[2].position,tes_in[3].position);
	tePatchDistance = vec4(gl_TessCoord.x, gl_TessCoord.y, 1-gl_TessCoord.x, 1-gl_TessCoord.y);
	tes_out.color = interpolate(tes_in[0].color, tes_in[1].color, tes_in[2].color, tes_in[3].color);
	tes_out.normal = calcnorm(tes_in[0].position, tes_in[1].position, tes_in[2].position, tes_in[3].position);
	
	tes_out.noise = 0 * turbulence(.60 * tes_out.normal.xyz);
	
	float b = getSmoothness(tes_out.color) * pnoise(2. * tes_out.position.xyz, vec3(1032353));
	//(1.0 gives wavy lines)
	float displacement =  tes_out.noise + b;
	vec3 nPos = tes_out.position.xyz + tes_out.normal * displacement;
	
	gl_Position = projection * view * model * vec4(nPos, 1.0);
	//gl_Position = projection * model * view * tes_out.position;
	
}